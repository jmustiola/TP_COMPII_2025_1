/*

    Objetivo 6: Ordenaci칩n por selecci칩n
    ====================================

    - Un m칠todo de ordenaci칩n muy simple, pero no muy eficiente, de elementos 洧눛洧릞, 洧눛洧릟,
    洧눛洧릠,...洧눛洧눒 en orden ascendente es el siguiente:

    * Paso 1: Localizar el elemento m치s peque침o de la lista 洧눛洧릞 a 洧눛洧눒; intercambiarlo con 洧눛洧릞.
    * Paso 2: Localizar el elemento m치s peque침o de la lista 洧눛洧릟 a 洧눛洧눒 ; intercambiarlo con 洧눛洧릟.
    * Paso 3: Localizar el elemento m치s peque침o de la lista 洧눛洧릠 a 洧눛洧눒; intercambiarlo con 洧눛洧눒.

    En el 칰ltimo paso, los dos 칰ltimos elementos se comparan e intercambian, si es 
    necesario, y la ordenaci칩n se termina. Realice un programa en C++ para ordenar una 
    lista de elementos, siguiendo el m칠todo descrito previamente.

*/

#include "DataStructures.h"
#include <iostream>
using namespace std;

void objetivoSeis(bool default = false)
{ 
    // Si default es verdadero, se crea una lista por defecto
    // de 5 elementos, de lo contrario se crea una lista
    // a partir de la entrada est치ndar.
    LinkedList<int> list;

    if (default)
    {
        cout << "Creando lista por defecto..." << endl;
        list.append(30);
        list.append(10);
        list.append(5);
        list.append(20);
        list.append(15);
        list.append(35);
        list.append(25);
        cout << "Lista por defecto creada." << endl;
        cout << "Lista por defecto: ";
        list.print();
    }
    else
    {
        cout << "Creando lista a partir de la entrada estandar..." << endl;
        list = LinkedList<int>::createListFromStdIn();
        cout << "Lista creada." << endl;
        cout << "Lista: ";
        list.print();
    }

    // Ordenar la lista usando el m칠todo de ordenaci칩n por selecci칩n
    int size = list.size();
    for (int i = 0; i < size; i++)
    {
        LinkedList<int> sublist = list.splice(i, size - 1);
        // Encontrar el 칤ndice del elemento m치s peque침o en la sublista
        // desde i hasta el final de la lista
        int minValue = sublist.getMin();
        sublist.print();
        int index = list.indexOf(minValue);
        // Intercambiar el elemento m치s peque침o con el elemento en la posici칩n i
        if (index != i)
        {
            int value  = list.removeByValueAndReturn(minValue);
            list.insert(i, value);
        }
    }

    cout << "Lista ordenada: ";
    list.print();
    cout << "Fin de la lista ordenada." << endl;
}
